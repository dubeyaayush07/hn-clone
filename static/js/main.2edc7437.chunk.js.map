{"version":3,"sources":["services/hnApi.js","components/Story.js","components/StoryBrowse.js","constants/index.js","components/StoryComment.js","components/StoryDetail.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","topStoriesUrl","itemUrl","getStoryIds","a","axios","get","then","data","result","getItem","itemId","Story","storyId","useState","story","setStory","useEffect","url","style","margin","title","extra","by","marginRight","key","href","StoryBrowse","storyIds","setStoryIds","minVal","setMinVal","maxVal","setMaxVal","header","itemLayout","marginTop","slice","map","defaultCurrent","defaultPageSize","onChange","value","total","length","StoryComment","commentId","comment","setComment","author","content","dangerouslySetInnerHTML","__html","text","StoryDetail","id","useParams","onBack","window","history","back","className","kids","Header","Layout","Content","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","theme","mode","defaultSelectedKeys","lineHeight","Item","fontSize","to","padding","exact","path","children","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2edc7437.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/';\nexport const topStoriesUrl = `${baseUrl}topstories.json`;\nexport const itemUrl = `${baseUrl}item/`;\n\nexport const getStoryIds = async () => {\n    const result = await axios.get(topStoriesUrl).then(({ data }) => data);\n    return result;\n};\n\nexport const getItem = async itemId => {\n    const result = await axios\n        .get(`${itemUrl + itemId}.json`)\n        .then(({ data }) => data);\n    \n    return result;\n}\n\n","import React, { useState, useEffect} from 'react';\nimport { getItem } from '../services/hnApi';\nimport { Card, Button } from 'antd'\n\nexport const Story = ({ storyId }) => {\n    const [story, setStory] = useState({});\n\n    useEffect(() => {\n        getItem(storyId).then(data => data && data.url && setStory(data));\n        \n    }, [storyId]);\n\n    return story && story.url ? (\n        <>\n            <Card style={{margin: '2rem 0rem'}} title={story.title}  extra={<em>{`By ${story.by}`}</em>}>\n                 <Button style={{marginRight: '0.5rem' }} key=\"2\">\n                     <a href={`story/${ storyId }`}>Comments</a>\n                 </Button>\n                 <Button key=\"1\"><a href={story.url}>Visit Source</a></Button>\n            </Card>\n        </>\n    ): null;\n}\n","import React, {useState, useEffect} from 'react';\nimport { getStoryIds } from '../services/hnApi';\nimport { Story } from './Story';\nimport { ITEM_PER_PAGE } from '../constants/index'\nimport { Pagination, List } from 'antd'\n\n\nexport const StoryBrowse = () => {\n\n    const [storyIds, setStoryIds] = useState([]);\n    const [minVal, setMinVal] = useState(0);\n    const [maxVal, setMaxVal] = useState(ITEM_PER_PAGE);\n\n\n    useEffect(() => {\n        getStoryIds().then(data => setStoryIds(data));\n    }, []);\n\n    const handleChange = (value) => {\n        if (value < 1) return;\n\n        setMinVal((value - 1) * ITEM_PER_PAGE);\n        setMaxVal(value * ITEM_PER_PAGE);\n    }\n\n    return (\n        <>\n            <List\n                \n                header={<h2>Top Stories</h2>}\n                itemLayout=\"horizontal\"\n            >           \n                <div style={{ marginTop: '2rem'}}>{storyIds.slice(minVal, maxVal).map((storyId) => <Story key={storyId}  storyId={storyId} />)} </div>\n            </List>\n            <Pagination\n                defaultCurrent={1}\n                defaultPageSize={ITEM_PER_PAGE}\n                onChange={handleChange}\n                total={storyIds.length}\n                style={{ marginTop: '2rem'}}\n            />\n\n        </>\n    );\n}\n","export const ITEM_PER_PAGE = 10;","import React, { useState, useEffect} from 'react';\nimport { getItem } from '../services/hnApi';\nimport { Comment } from 'antd'\n\nexport const StoryComment = ({ commentId }) => {\n    const [comment, setComment] = useState({});\n\n    useEffect(() => {\n        getItem(commentId).then(data => data && setComment(data));\n        \n    }, [commentId]);\n\n    return comment ? (\n        <>\n            <Comment\n                author={comment.by}\n                content={<p dangerouslySetInnerHTML={{ __html: comment.text }}></p>}\n            />\n        </>\n    ): null;\n}\n","import React, { useState, useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StoryComment } from './StoryComment'\nimport { getItem } from '../services/hnApi';\nimport {  ITEM_PER_PAGE } from '../constants/index'\nimport { Pagination, PageHeader, Button, List} from 'antd'\n\n\nexport const StoryDetail = () => {\n    \n    const [story, setStory] = useState({});\n    const [minVal, setMinVal] = useState(0);\n    const [maxVal, setMaxVal] = useState(ITEM_PER_PAGE);\n    const { id } = useParams();\n\n    useEffect(() => {\n        getItem(id).then(data => data && data.url && setStory(data));\n    }, [id]);\n\n    const handleChange = (value) => {\n        if (value < 1) return;\n\n        setMinVal((value - 1) * ITEM_PER_PAGE);\n        setMaxVal(value * ITEM_PER_PAGE);\n    }\n\n    return story && story.url ? (\n        <>\n            <div>\n            <PageHeader\n                onBack={() => window.history.back()}\n                title={story.title}\n                extra={[\n                    <Button key=\"1\"><a href={story.url}>Visit Source</a></Button>,\n                  ]}\n                >\n            </PageHeader>\n            </div>\n            <List\n                className=\"comment-list\"\n                header={`${story.kids ? story.kids.length: 0} replies`}\n                itemLayout=\"horizontal\"\n            >           \n                <div>{story.kids ? story.kids.slice(minVal, maxVal).map((commentId) => <StoryComment key={commentId}  commentId={commentId} />): null }</div>\n            </List>\n            \n            <Pagination\n                defaultCurrent={1}\n                defaultPageSize={ITEM_PER_PAGE}\n                onChange={handleChange}\n                total={story.kids ? story.kids.length: 0}\n                style={{ marginTop: '2rem'}}\n            />\n        </>\n    ): null;\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch, \n    Route,\n    Link\n} from 'react-router-dom'\nimport { StoryBrowse } from './components/StoryBrowse';\nimport { StoryDetail } from './components/StoryDetail';\nimport './App.css';\nimport { Layout, Menu } from 'antd';\n\nconst { Header, Content} = Layout;\n\nexport const App = () => {\n    return (\n        <Router>\n            <Layout className=\"layout\">\n                <Header>\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"horizontal\"\n                        defaultSelectedKeys={['1']}\n                        style={{ lineHeight: '64px' }}\n                    >\n                        <Menu.Item key=\"1\" style={{ fontSize : '1.2rem'}}><Link to=\"/\">Hacker News</Link></Menu.Item>\n                    </Menu>\n                </Header>\n                <Content style={{ padding: '3rem 4rem' }}>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <StoryBrowse />\n                        </Route>\n                        <Route path=\"/story/:id\" children={<StoryDetail />} />\n                    </Switch>\n                </Content>\n            </Layout>\n        </Router>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}